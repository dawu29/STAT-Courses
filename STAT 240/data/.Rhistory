geom_point() +
geom_smooth(method = "lm")
gapminder %>%
filter(continent == "Oceania") %>%
ggplot(aes(x=year,y=lifeExp,color=country)) +
geom_point() +
geom_smooth(method = "loess", span=3/4)
qplot(gdpPercap,lifeExp,data=gapminder07)
qplot(gdpPercap,lifeExp,data=gapminder07,color = continent)
ggplot(gapminder07, aes(x=gdpPercap,y=lifeExp,color=continent)) +
geom_point() +
geom_smooth(method = "lm", se=FALSE)
data <- read_tsv("MLLT3_small.vcf",comment="##")
library(tidyverse)
read_csv("MLLT3_small.vcf",comment="#")
data <- read_tsv("MLLT3_small.vcf",comment="##")
library(tidyverse)
library(nycflights13)
# One of the exercises in the lecture 7 notes asked you to create a table called top_dep_delay from the
# flights table. top_dep_delay was comprised of the year-month-days with the 3 largest total delays,
# where total delay is defined as the sum of the dep_delay variable for each year-month-day. Recreate
# top_dep_delay for this lab exercise. For each of the three top-delay days, report the median, third
# quartile and maximum of the dep_delay variable in flights.
flights
top_dep_delay <- flights %>%
group_by(year, month, day) %>%
summarize(total_delay=(sum(dep_delay, na.rm=TRUE)),
median=(median(dep_delay,na.rm=TRUE)),
Q3=(quantile(dep_delay,probs=0.75,na.rm=TRUE)),
max=(max(dep_delay,na.rm=TRUE))) %>%
arrange(desc(total_delay)) %>%
head(n=3)
top_dep_delay
t2 <- flights %>%
inner_join(temp) %>%
select(carrier, flight, origin, dest)
t2
#Create a table with the year-month-day-flight-tailnum combinations that have more than 1 flight (careful
# about missing tailnum). Use this table to filter the flights table and then select carrire, flight, origin
# and dest. Which airline used the same flight number for a plane that made a trip from La Guardia to
# St. Louis in the morning and from Newark to Denver in the afternoon?
temp <- flights %>%
count(year,month,day,flight,tailnum) %>%
filter(n > 1 , !is.na(tailnum))
temp
t2 <- flights %>%
inner_join(temp) %>%
select(carrier, flight, origin, dest)
t2
standardize <- function(x, na.rm=TRUE) {
(x - mean(x, na.rm=na.rm)) / sd(x, na.rm=na.rm)
}
standardize(y)
# Exercise 2. Re-write our standardize() function to have an
# additional argument na.rm, set to TRUE by default.
y = c(2,3,4,2,NA)
standardize <- function(x, na.rm=TRUE) {
(x - mean(x, na.rm=na.rm)) / sd(x, na.rm=na.rm)
}
standardize(y)
k <-c(2,3,NA)
length(k)
length(k[!is.na(k)])
Boston <- read_csv("Boston.csv")
standardize_tibble2(Boston)
standardize_tibble(Boston)
length(Boston$crim)
center(k)
spread(k)
standardize_tibble2 <- function(tt){
for(i in 1:ncol(tt)) {
tt[[i]] <- standardize(tt[[i]])
}
return(tt)
}
standardize <- function(x, na.rm=TRUE) {
center <- function(x, na.rm=TRUE) {
sum(x, na.rm=na.rm) / len(x)
}
len <- function(x) {
counter <- 0
for(i in x) {
if(!is.na(i)){
counter <- counter + 1
}
}
return (counter)
}
spread <- function(x, na.rm=TRUE) {
(sum((x - center(x, na.rm=na.rm))^2, na.rm=na.rm) / (len(x) - 1))^0.5
}
(x - center(x, na.rm=na.rm)) / spread(x, na.rm=na.rm)
}
center <- function(x, na.rm=TRUE) {
sum(x, na.rm=na.rm) / len(x)
}
len <- function(x) {
counter <- 0
for(i in x) {
if(!is.na(i)){
counter <- counter + 1
}
}
return (counter)
}
spread <- function(x, na.rm=TRUE) {
(sum((x - center(x, na.rm=na.rm))^2, na.rm=na.rm) / (len(x) - 1))^0.5
}
?sum()
len(k)
center(k)
spread(k)
sd(k, na.rm=TRUE)
#Exercise 2:
# Write a for() loop to find the mode() of each column in nycflights13::flights
library(nycflights13)
data <-nycflights13::flights
ex2 <- vector("character", length(data))
for(i in seq_along(data)) {
ex2[i] <- mode(data[[i]])
}
ex2
for(i in seq_along(data)) {
ex2[i] <- mode(data[i])
}
ex2
data[1]
data[[1]]
#-------------------------------------------------------------------
#  SIMPLE REGRESSION
#-------------------------------------------------------------------
x<-c(6,6.3,6.5,6.8,7,7.1,7.5,7.5,7.6)
y<-c(39,58,49,53,80,86,115,124,104)
plot(x,y,main="Simple Linear Regression")
Sxy = sum((x-mean(x))*(y-mean(y))) # mean(x) is \bar{x}
Sxx = sum((x-mean(x))^2)
beta1hat = Sxy/Sxx
beta0hat = mean(y) - beta1hat*mean(x)
beta0hat
beta1hat
yhat = beta0hat+beta1hat*x
SSE = sum((y-yhat)^2)
n = length(y)
SST = sum((y-mean(y))^2)
SSR = SST - SSE
R2 = SSR/SST
R2
stdError = sqrt((SSE/(n-2))/Sxx)
stdError
tstat = beta1hat/stdError
tstat
2*pt(tstat, df=n-2, lower.tail = FALSE)
# use the R package
lm.out<-lm(y~x)
lm.out
summary(lm.out)
lines(x,fitted(lm.out))
anova(lm.out)
beta0hat
beta1hat
n = length(y)
n
high <- c(1.2, 0.9, 0.7, 1.0, 1.7, 1.7, 1.1, 0.9, 1.7,
1.9, 1.3, 2.1, 1.6, 1.8, 1.4, 1.3, 1.9, 1.6,
0.8, 2.0, 1.7, 1.6, 2.3, 2.0)
poor <- c(1.6, 1.5, 1.1, 2.1, 1.5, 1.3, 1.0, 2.6)
qqnorm(high, main = "Normal Q-Q Plot for High-Quality Fabric")
qqline(high)
qqnorm(poor, main = "Normal Q-Q Plot for Poor-Quality Fabric")
qqline(poor)
x<-c(30, 28, 32, 25, 25, 25, 22, 24, 35, 40)
y<-c(25, 30, 27, 40, 42, 40, 50, 45, 30, 25)
# Look at scatterplot first
plot(x, y, main="Scatterplot", xlab = "wheat in tons", ylab="price per kilo flour")
## Method I: Manual calculation
(Sxy = sum((x-mean(x))*(y-mean(y))))
(Sxx = sum((x-mean(x))^2))
(beta1hat = Sxy/Sxx)
(beta0hat = mean(y) - beta1hat*mean(x))
## Method II: Use lm() to fit linear models and extract coefficients
lm.fit <- lm(y ~ x)
lm.fit$coefficients
# Compute for SSE
yhat = beta0hat+beta1hat*x
SSE = sum((y-yhat)^2)
n = length(y)
sigmahat = sqrt(SSE/(n-2))
t.crit = qt(1-0.025, df = n-2)
# Build  a 95% CI for beta 1
(Lower <- beta1hat - t.crit*sqrt(sigmahat^2/Sxx))
(Upper <- beta1hat + t.crit*sqrt(sigmahat^2/Sxx))
## Method I: t test
(test.stat <- (beta1hat-0)/sqrt(sigmahat^2/Sxx)) # ~ t distribution with df = n-2
(p.value <- 2*pt(abs(test.stat), df=n-2, lower.tail = F))  # 2*(Area under the t curve to the right of |t|)
## Method II: F test
anova <- aov(y ~ x)
summary(anova)
### (d): Find CI and PI for a new data point x*=30
x.star <- data.frame(x=30)
## The confidence interval around the mean response for a fixed value x*
predict(lm.fit, newdata = x.star, interval = 'confidence', level = 0.95) # CI = p[29.66295, 37.34676]
## The prediction interval for a future Y observation given a fixed value x*
predict(lm.fit, newdata = x.star, interval = 'predict', level = 0.95)  # PI = [21.13677, 45.87294]
# This means that, according to our model, 95% of 30 tons of wheat have a price between 21.14
(df <- floor((s1^2/m+s2^2/n)^2/((s1^2/m)^2/(m-1) + (s2^2/n)^2/(n-1))))
df
high <- c(1.2, 0.9, 0.7, 1.0, 1.7, 1.7, 1.1, 0.9, 1.7,
1.9, 1.3, 2.1, 1.6, 1.8, 1.4, 1.3, 1.9, 1.6,
0.8, 2.0, 1.7, 1.6, 2.3, 2.0)
poor <- c(1.6, 1.5, 1.1, 2.1, 1.5, 1.3, 1.0, 2.6)
qqnorm(high, main = "Normal Q-Q Plot for High-Quality Fabric")
qqline(high)
qqnorm(poor, main = "Normal Q-Q Plot for Poor-Quality Fabric")
qqline(poor)
boxplot(high, poor, main = "Comparative Boxplot", names = c("high", "poor"))
# Sample statistics
m <- length(high)
x.bar <- mean(high)
s1 <- sqrt(var(high))
n <- length(poor)
y.bar <- mean(poor)
s2 <- sqrt(var(poor))
# Test statistic value
(t.stat <- (x.bar-y.bar)/sqrt(s1^2/m+s2^2/n))
# Degree of freedom (round it down to the nearest integer)
s1=2.3
m=48
s2=4.1
n=51
(df <- floor((s1^2/m+s2^2/n)^2/((s1^2/m)^2/(m-1) + (s2^2/n)^2/(n-1))))
df
# Degree of freedom (round it down to the nearest integer)
s1=2.3
m=48
s2=4.1
n=51
df <- floor((s1^2/m+s2^2/n)^2/((s1^2/m)^2/(m-1) + (s2^2/n)^2/(n-1)))
# Degree of freedom (round it down to the nearest integer)
s1=2.3
m=48
s2=4.1
n=51
df <- floor((s1^2/m+s2^2/n)^2/((s1^2/m)^2/(m-1) + (s2^2/n)^2/(n-1)))
# Degree of freedom (round it down to the nearest integer)
s1=2.3
m=48
s2=4.1
n=51
df <- floor((s1^2/m+s2^2/n)^2/((s1^2/m)^2/(m-1) + (s2^2/n)^2/(n-1)))
df
# I. Critical value approach: reject H0 if t <= -t_{alpha/2,df}
(t.crit <- qt(0.025, df, lower.tail = TRUE))
# II. P-value approach
(p.value <- 2*pt(abs(t.stat), df, lower.tail = FALSE))
# Note: t.test() is available for performing one and two sample t-tests. Degree of
# freedom is not rounded down to the nearest integer in t.test().
t.test(high, poor, alternative = "two.sided", var.equal = FALSE)
library(nycflights13)
flights
flights %>%
select(year,month,day,flight,tailnum,dest) %>%
mutate(ID = row_number())
flights %>%
select(year,month,day,flight,tailnum,dest) %>%
mutate(ID = row_number())
library(tidyverse)
library(nycflights13)
flights
flights %>%
select(year,month,day,flight,tailnum,dest) %>%
mutate(ID = row_number())
flights %>%
select(year,month,day,flight,tailnum,dest) %>%
mutate(ID = row_number())
flights %>%
select(year,month,day,flight,tailnum,dest) %>%
mutate(ID = row_number())
flights %>%
select(year,month,day,flight,tailnum,dest) %>%mutate(ID = row_number())
flights %>%select(year,month,day,flight,tailnum,dest) %>%mutate(ID = row_number())
flights %>%select(year,month,day,flight,tailnum,dest) %>%mutate(ID = row_number())
X = 301116278
set.seed(X)
rnorm(1)
X = 301116278
set.seed(X)
rnorm(1)
X = 301116278
set.seed(X)
rnorm(1)
#Problem 1
radius = c(1,3,5,7)
volume = 4/3*pi*radius^3
par(mfrow=c(2,2))
plot(radius,volume,main="Radius vs Volume for Sphere Line Plot",
xlab="Radius",
ylab="Volume",
col = 'blue',
lwd = 4,
type = 'l',
cex.main=0.7,
ylim=c(0,1500),xlim=c(-1,9))
plot(radius,volume,main="Radius vs Volume for Sphere Point Plot",
xlab="Radius",
ylab="Volume",
col = 'red',
lwd = 4,
type = 'p',
cex.main=0.7,
ylim=c(0,1500),xlim=c(-1,9))
plot(radius,volume,main="Radius vs Volume for Sphere No Plotting Plot ",
xlab="Radius",
ylab="Volume",
col = 'green',
lwd = 4,
type = 'n',
cex.main=0.7,
ylim=c(0,1500),xlim=c(-1,9))
plot(radius,volume,main="Radius vs Volume for Sphere Line and Point Plot",
xlab="Radius",
ylab="Volume",
col = 'purple',
lwd = 4,
type = 'b',
cex.main=0.7,
ylim=c(0,1500),xlim=c(-1,9))
pdf("sample.pdf", 7, 5)
#Problem 1
radius = c(1,3,5,7)
volume = 4/3*pi*radius^3
par(mfrow=c(2,2))
plot(radius,volume,main="Radius vs Volume for Sphere Line Plot",
xlab="Radius",
ylab="Volume",
col = 'blue',
lwd = 4,
type = 'l',
cex.main=0.7,
ylim=c(0,1500),xlim=c(-1,9))
plot(radius,volume,main="Radius vs Volume for Sphere Point Plot",
xlab="Radius",
ylab="Volume",
col = 'red',
lwd = 4,
type = 'p',
cex.main=0.7,
ylim=c(0,1500),xlim=c(-1,9))
plot(radius,volume,main="Radius vs Volume for Sphere No Plotting Plot ",
xlab="Radius",
ylab="Volume",
col = 'green',
lwd = 4,
type = 'n',
cex.main=0.7,
ylim=c(0,1500),xlim=c(-1,9))
plot(radius,volume,main="Radius vs Volume for Sphere Line and Point Plot",
xlab="Radius",
ylab="Volume",
col = 'purple',
lwd = 4,
type = 'b',
cex.main=0.7,
ylim=c(0,1500),xlim=c(-1,9))
pdf("sample.pdf")
plot(radius,volume,main="Radius vs Volume for Sphere Line Plot",
xlab="Radius",
ylab="Volume",
col = 'blue',
lwd = 4,
type = 'l',
ylim=c(0,1500),xlim=c(-1,9))
plot(radius,volume,main="Radius vs Volume for Sphere Point Plot",
xlab="Radius",
ylab="Volume",
col = 'red',
lwd = 4,
type = 'p',
cex.main=0.7,
ylim=c(0,1500),xlim=c(-1,9))
plot(radius,volume,main="Radius vs Volume for Sphere No Plotting Plot ",
xlab="Radius",
ylab="Volume",
col = 'green',
lwd = 4,
type = 'n',
cex.main=0.7,
ylim=c(0,1500),xlim=c(-1,9))
plot(radius,volume,main="Radius vs Volume for Sphere Line and Point Plot",
xlab="Radius",
ylab="Volume",
col = 'purple',
lwd = 4,
type = 'b',
cex.main=0.7,
ylim=c(0,1500),xlim=c(-1,9))
par(mfrow=c(2,2))
plot(radius,volume,main="Radius vs Volume for Sphere Line Plot",
xlab="Radius",
ylab="Volume",
col = 'blue',
lwd = 4,
type = 'l',
ylim=c(0,1500),xlim=c(-1,9))
plot(radius,volume,main="Radius vs Volume for Sphere Point Plot",
xlab="Radius",
ylab="Volume",
col = 'red',
lwd = 4,
type = 'p',
cex.main=0.7,
ylim=c(0,1500),xlim=c(-1,9))
plot(radius,volume,main="Radius vs Volume for Sphere No Plotting Plot ",
xlab="Radius",
ylab="Volume",
col = 'green',
lwd = 4,
type = 'n',
cex.main=0.7,
ylim=c(0,1500),xlim=c(-1,9))
plot(radius,volume,main="Radius vs Volume for Sphere Line and Point Plot",
xlab="Radius",
ylab="Volume",
col = 'purple',
lwd = 4,
type = 'b',
cex.main=0.7,
ylim=c(0,1500),xlim=c(-1,9))
pdf("sample.pdf")
?pdf()
#Problem 1
radius = c(1,3,5,7)
volume = 4/3*pi*radius^3
par(mfrow=c(2,2))
plot(radius,volume,main="Radius vs Volume for Sphere Line Plot",
xlab="Radius",
ylab="Volume",
col = 'blue',
lwd = 4,
type = 'l',
ylim=c(0,1500),xlim=c(-1,9))
plot(radius,volume,main="Radius vs Volume for Sphere Point Plot",
xlab="Radius",
ylab="Volume",
col = 'red',
lwd = 4,
type = 'p',
cex.main=0.7,
ylim=c(0,1500),xlim=c(-1,9))
plot(radius,volume,main="Radius vs Volume for Sphere No Plotting Plot ",
xlab="Radius",
ylab="Volume",
col = 'green',
lwd = 4,
type = 'n',
cex.main=0.7,
ylim=c(0,1500),xlim=c(-1,9))
plot(radius,volume,main="Radius vs Volume for Sphere Line and Point Plot",
xlab="Radius",
ylab="Volume",
col = 'purple',
lwd = 4,
type = 'b',
cex.main=0.7,
ylim=c(0,1500),xlim=c(-1,9))
#Problem 4
#4a
poke[poke[,"Height_m"]>2 & poke[,"isLegendary"] == "True","Name"]
#4b
par(mfrow=c(1,1))
poke = read.csv(file = "pokemon_2019.csv",header=TRUE,sep = ",")
setwd("C:/Users/John/Desktop/STAT 240/Data")
#Problem 4
#4a
poke[poke[,"Height_m"]>2 & poke[,"isLegendary"] == "True","Name"]
poke = read.csv(file = "pokemon_2019.csv",header=TRUE,sep = ",")
names(poke)
plot(poke[,"Type_1"], horiz=TRUE,las=2)
?plot
poke[,"HP"]>200
poke[poke[,"HP"]>200,"HP"]
which(poke[,"HP"]>200)
poke[poke[,"HP"]>200,]
#Problem 4
#4a
poke[poke[,"Height_m"]>2 & poke[,"isLegendary"] == "True","Name"]
#4b
par(mfrow=c(1,1))
#Problem 4
#4a
poke[poke[,"Height_m"]>2 & poke[,"isLegendary"] == "True","Name"]
#4b
par(mfrow=c(1,1))
ha = poke[poke$Body_Style == 'head_arms',]
sb = poke[poke$Body_Style == 'serpentine_body',]
plot(ha$Attack,ha$Defense,main="Attack vs Defense",
xlab="Attack",
ylab="Defense",
col = 2,
type = 'p',
ylim=c(10,210),xlim=c(10,160))
points(sb$Attack,sb$Defense,col=3)
legend(x="topleft",col=2:3,pch=c(1,1), c("Head Arms body type","Serpentine Body body type"))
legend(x="topleft",col=2:3,pch=c(1,1), c("Head Arms body type","Serpentine Body body type"))
pokenew = poke[1,]
pokenew$Name = "Charmandaver"
pokenew$Type_1 = "student"
pokemonextra = rbind(pokenew,poke)
plot(pokemonextra[,"Type_1"], las=2)
plot(poke[,"Attack"] , poke[,"Defense"],
ylab="Defense",xlab="Attack",
col= poke[,"Generation"],pch= poke[,"Generation"],
main="Make your own sensible title to go here")
